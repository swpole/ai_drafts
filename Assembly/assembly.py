import gradio as gr
from moviepy import ImageClip, concatenate_videoclips
import tempfile
import os

def insert_image(gallery_images, new_img, selected_index, before: bool):
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç new_img –ª–∏–±–æ –ø–µ—Ä–µ–¥ (–µ—Å–ª–∏ before=True), –ª–∏–±–æ –ø–æ—Å–ª–µ (if before=False)
    –ø–æ–∑–∏—Ü–∏–∏ selected_index –≤ gallery_images.
    –ï—Å–ª–∏ selected_index is None –∏–ª–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω–µ—Ü.
    """
    imgs = list(gallery_images) if gallery_images else []
    if not new_img:
        return imgs
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∞–ª–∏–¥–µ–Ω
    if selected_index is not None and 0 <= selected_index < len(imgs):
        if before:
            imgs.insert(selected_index, new_img)
        else:
            imgs.insert(selected_index + 1, new_img)
    else:
        # –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–≤–∞–ª–∏–¥–µ–Ω ‚Äî –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü
        imgs.append(new_img)
    return imgs

def delete_image(gallery_images, selected_index):
    """
    –£–¥–∞–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.
    –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –≥–∞–ª–µ—Ä–µ—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    imgs = list(gallery_images) if gallery_images else []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
    if selected_index is not None and 0 <= selected_index < len(imgs):
        imgs.pop(selected_index)
    
    return imgs

def create_video_with_transitions(gallery_images, duration_per_image, transition_duration, output_filename="output_video.mp4"):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
    """
    if not gallery_images:
        raise gr.Error("–ì–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
    
    if duration_per_image <= 0:
        raise gr.Error("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    
    if transition_duration < 0:
        raise gr.Error("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ –±—ã–ª –¥–ª–∏–Ω–Ω–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if transition_duration * 2 >= duration_per_image:
        raise gr.Error("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    
    clips = []
    
    for i, img_info in enumerate(gallery_images):
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏
        if isinstance(img_info, tuple) and len(img_info) == 2:
            img_path = img_info[0]  # –ì—Ä–∞–¥–∏–æ —Ö—Ä–∞–Ω–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ (–ø—É—Ç—å, –º–µ—Ç–∫–∞)
        else:
            img_path = img_info
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        clip = ImageClip(img_path, duration=duration_per_image).resized(width=640, height=480)
        
        clips.append(clip)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª–∏–ø—ã
    final_clip = concatenate_videoclips(clips, method="compose")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
    final_clip.write_videofile(output_filename, fps=24, logger=None)
    
    return output_filename

def on_select(evt: gr.SelectData):
    return evt.index

with gr.Blocks() as demo:
    gr.Markdown("# üé¨ –°–æ–∑–¥–∞—Ç–µ–ª—å –≤–∏–¥–µ–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏")
    
    with gr.Row():
        with gr.Column(scale=2):
            gallery = gr.Gallery(label="–ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", columns=6, interactive=True, height=400)
            selected = gr.State(value=None)
            
            with gr.Row():
                new_img_upload = gr.Image(sources="upload", type="filepath", label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É", height=100)
                new_img_url = gr.Textbox(label="–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ URL", placeholder="https://...")
            
            with gr.Row():
                btn_before = gr.Button("–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–∏–º")
                btn_after = gr.Button("–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ")
                btn_delete = gr.Button("–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π", variant="stop")
        
        with gr.Column(scale=1):
            gr.Markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ")
            duration_per_image = gr.Slider(minimum=1, maximum=10, value=3, step=0.5, label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)")
            transition_duration = gr.Slider(minimum=0, maximum=2, value=0.5, step=0.1, label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ (—Å–µ–∫—É–Ω–¥—ã)")
            output_filename = gr.Textbox(value="output_video.mp4", label="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            
            btn_create_video = gr.Button("üé• –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", variant="primary", size="lg")
            
            video_output = gr.Video(label="–†–µ–∑—É–ª—å—Ç–∞—Ç")
            
            gr.Markdown("""
            **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
            1. –î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–∞–ª–µ—Ä–µ—é
            2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã
            3. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ"
            4. –°–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
            """)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–µ–π
    gallery.select(on_select, [], selected)

    def add_before_handler(gallery_images, upload, url, sel_idx):
        new_img = upload if upload is not None else (url if url else None)
        return insert_image(gallery_images, new_img, sel_idx, before=True)

    btn_before.click(
        add_before_handler,
        inputs=[gallery, new_img_upload, new_img_url, selected],
        outputs=gallery
    )

    def add_after_handler(gallery_images, upload, url, sel_idx):
        new_img = upload if upload is not None else (url if url else None)
        return insert_image(gallery_images, new_img, sel_idx, before=False)

    btn_after.click(
        add_after_handler,
        inputs=[gallery, new_img_upload, new_img_url, selected],
        outputs=gallery
    )

    def delete_handler(gallery_images, sel_idx):
        return delete_image(gallery_images, sel_idx)

    btn_delete.click(
        delete_handler,
        inputs=[gallery, selected],
        outputs=gallery
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
    def create_video_handler(gallery_images, duration, transition, filename):
        try:
            video_path = create_video_with_transitions(gallery_images, duration, transition, filename)
            return video_path
        except Exception as e:
            raise gr.Error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {str(e)}")

    btn_create_video.click(
        create_video_handler,
        inputs=[gallery, duration_per_image, transition_duration, output_filename],
        outputs=video_output
    )

if __name__ == "__main__":
    demo.launch()