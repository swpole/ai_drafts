import gradio as gr
import speech_recognition as sr
import numpy as np
from typing import Union, Tuple, Optional

class SpeechToTextApp:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gradio.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è —Ä–µ—á–∏."""
        self.recognizer = sr.Recognizer()

    def transcribe_audio(
        self,
        audio: Optional[Union[str, Tuple[int, np.ndarray]]],
        engine: str,
        google_cloud_key: str,
        houndify_client_id: str,
        houndify_client_key: str,
        ibm_username: str,
        ibm_password: str,
        ibm_url: str
    ) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–≤–∏–∂–∫–æ–º.
        """
        if audio is None:
            return "–ê—É–¥–∏–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"

        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏–ª–∏ –∑–∞–ø–∏—Å–∏
            if isinstance(audio, str):
                with sr.AudioFile(audio) as source:
                    audio_data = self.recognizer.record(source)
            else:
                sr_value, y = audio
                if y.ndim > 1:
                    y = y.mean(axis=1)
                import tempfile, wave
                with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_file:
                    with wave.open(temp_file.name, 'wb') as wf:
                        wf.setnchannels(1)
                        wf.setsampwidth(2)
                        wf.setframerate(sr_value)
                        wf.writeframes((y * 32767).astype(np.int16).tobytes())
                    with sr.AudioFile(temp_file.name) as source:
                        audio_data = self.recognizer.record(source)

            # –í—ã–±–æ—Ä –¥–≤–∏–∂–∫–∞
            if engine == "Google":
                text = self.recognizer.recognize_google(audio_data, language="ru-RU")

            elif engine == "Google Cloud":
                if not google_cloud_key:
                    return "–£–∫–∞–∂–∏—Ç–µ Google Cloud JSON –∫–ª—é—á"
                text = self.recognizer.recognize_google_cloud(audio_data, credentials_json=google_cloud_key, language="ru-RU")

            elif engine == "Sphinx":
                text = self.recognizer.recognize_sphinx(audio_data, language="ru-RU")

            elif engine == "Houndify":
                if not houndify_client_id or not houndify_client_key:
                    return "–£–∫–∞–∂–∏—Ç–µ Houndify Client ID –∏ Client Key"
                text = self.recognizer.recognize_houndify(audio_data, client_id=houndify_client_id, client_key=houndify_client_key)

            elif engine == "IBM Watson":
                if not ibm_username or not ibm_password or not ibm_url:
                    return "–£–∫–∞–∂–∏—Ç–µ IBM Watson Username, Password –∏ URL"
                text = self.recognizer.recognize_ibm(
                    audio_data,
                    username=ibm_username,
                    password=ibm_password,
                    url=ibm_url,
                    language="ru-RU"
                )
            else:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫"

            return text

        except sr.UnknownValueError:
            return "–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"
        except sr.RequestError as e:
            return f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}"
        except Exception as e:
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

    def create_interface(self):
        """–°–æ–∑–¥–∞–µ—Ç Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        with gr.Blocks(title="–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç") as demo:
            gr.Markdown("# üé§ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç")
            gr.Markdown("–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∏–∂–æ–∫, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–∏, –∑–∞—Ç–µ–º –∑–∞–ø–∏—à–∏—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")

            with gr.Row():
                engine_dropdown = gr.Dropdown(
                    choices=["Google", "Google Cloud", "Sphinx", "Houndify", "IBM Watson"],
                    value="Google",
                    label="–î–≤–∏–∂–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
                    interactive=True
                )

            with gr.Accordion("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API (–¥–ª—è –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤)", open=False):
                google_cloud_key = gr.Textbox(
                    label="Google Cloud JSON –∫–ª—é—á",
                    placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON –∫–ª—é—á–∞...",
                    lines=6
                )
                houndify_client_id = gr.Textbox(label="Houndify Client ID")
                houndify_client_key = gr.Textbox(label="Houndify Client Key", type="password")
                ibm_username = gr.Textbox(label="IBM Watson Username")
                ibm_password = gr.Textbox(label="IBM Watson Password", type="password")
                ibm_url = gr.Textbox(label="IBM Watson URL", placeholder="https://api.us-south.speech-to-text.watson.cloud.ibm.com/instances/xxx")

            with gr.Row():
                audio_input = gr.Audio(
                    sources=["microphone", "upload"],
                    type="filepath",
                    label="–ê—É–¥–∏–æ–≤—Ö–æ–¥",
                    interactive=True
                )

            with gr.Row():
                convert_btn = gr.Button("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç", variant="primary")

            with gr.Row():
                recognized_text = gr.Textbox(
                    label="–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
                    placeholder="–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...",
                    lines=4,
                    max_lines=10,
                    interactive=True,
                    show_copy_button=True
                )

            with gr.Row():
                editing_text = gr.Textbox(
                    label="–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç",
                    placeholder="–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ...",
                    lines=6,
                    max_lines=15,
                    interactive=True,
                    show_copy_button=True
                )

            convert_btn.click(
                fn=self.transcribe_audio,
                inputs=[
                    audio_input,
                    engine_dropdown,
                    google_cloud_key,
                    houndify_client_id,
                    houndify_client_key,
                    ibm_username,
                    ibm_password,
                    ibm_url
                ],
                outputs=recognized_text
            )

        return demo

    def launch(self, **kwargs):
        demo = self.create_interface()
        demo.launch(**kwargs)

if __name__ == "__main__":
    app = SpeechToTextApp()
    app.launch(share=True)
