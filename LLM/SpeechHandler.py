import gradio as gr
import whisper

class SpeechHandler:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Whisper
    """
    
    def __init__(self, model_name="large"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Whisper
        
        Args:
            model_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Whisper (tiny, base, small, medium, large)
        """
        self.model_name = model_name
        self.whisper_model = None
        self.load_model()
    
    def load_model(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        """
        try:
            self.whisper_model = whisper.load_model(self.model_name)
            print(f"–ú–æ–¥–µ–ª—å Whisper '{self.model_name}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper: {e}")
            self.whisper_model = None
    
    def transcribe_audio(self, audio_file_path, language="ru"):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ Whisper.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
        
        Args:
            audio_file_path: –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            language: —è–∑—ã–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (ru, en, etc.)
        """
        if audio_file_path is None:
            return "–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω."
        
        if self.whisper_model is None:
            return "–ú–æ–¥–µ–ª—å Whisper –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."

        print(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ: {audio_file_path}")
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å
            result = self.whisper_model.transcribe(audio_file_path, language=language)
            transcribed_text = result["text"]
            print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {transcribed_text}")
            return transcribed_text
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}"
    
    def get_available_models(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Whisper
        """
        return ["tiny", "base", "small", "medium", "large"]
    
    def change_model(self, model_name):
        """
        –°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏ Whisper
        """
        if model_name in self.get_available_models():
            self.model_name = model_name
            self.load_model()
            return f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {model_name}"
        else:
            return f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    def create_interface(self):
        """
        –°–æ–∑–¥–∞–µ—Ç Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç
        """
        with gr.Blocks(title="Speech to Text", theme="soft") as interface:
            gr.Markdown("# üéôÔ∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç")

            # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            with gr.Accordion("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", open=False):
                gr.Markdown("""
                **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
                1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å Whisper (base - —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞)
                2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                3. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç"
                4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                
                **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:** WAV, MP3, FLAC, M4A
                **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** –¥–æ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                """)

            # –ë–ª–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
            with gr.Column(scale=1):
                audio_input = gr.Audio(
                    label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", 
                     type="filepath", 
                    interactive=True
                )
            
            # –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
            model_status = "üü¢ –ó–∞–≥—Ä—É–∂–µ–Ω–∞" if self.whisper_model else "üî¥ –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
            gr.Markdown(f"**–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ Whisper:** {model_status} ({self.model_name})")

            with gr.Row():
                # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ Whisper
                with gr.Column(scale=2):
                    model_selector = gr.Dropdown(
                        choices=self.get_available_models(),
                        value=self.model_name,
                        label="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Whisper",
                        info="–ë–æ–ª—å—à–∏–µ –º–æ–¥–µ–ª–∏ —Ç–æ—á–Ω–µ–µ, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ"
                    )
                with gr.Column(scale=1):
                    change_model_btn = gr.Button("üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")
                with gr.Column(scale=1):
                    model_status_output = gr.Textbox(label="–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏", interactive=False)

            with gr.Row():
                # –ë–ª–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
                with gr.Column(scale=1):
                    language_selector = gr.Dropdown(
                            choices=["ru", "en", "auto"],
                            value="ru",
                            label="–Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"
                    )
                    
                    transcribe_button = gr.Button("üîä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç", variant="primary")

                # –ë–ª–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
                with gr.Column(scale=2):
                    text_output = gr.Textbox(
                        label="–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", 
                        lines=8, 
                        placeholder="–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...",
                        interactive=True,
                        show_copy_button=True
                    )
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ
            transcribe_button.click(
                fn=self.transcribe_audio, 
                inputs=[audio_input, language_selector], 
                outputs=text_output
            )
            
            # –°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏
            change_model_btn.click(
                fn=self.change_model,
                inputs=model_selector,
                outputs=model_status_output
            )

        return interface

    def launch_interface(self, server_name="0.0.0.0", share=False, debug=True, port=7860):

        interface = self.create_interface()
        
        print(f"–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ SpeechHandler –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
        print(f"–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:{port} –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ")
        
        try:
            interface.launch(
                server_name=server_name,
                share=share,
                debug=debug,
                server_port=port
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ—Ä—Ç {port} —Å–≤–æ–±–æ–¥–µ–Ω –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç")

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ SpeechHandler
    speech_handler = SpeechHandler("large")
    
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SpeechHandler ===")
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {speech_handler.get_available_models()}")
    print(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {speech_handler.model_name}")
    print(f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {speech_handler.whisper_model is not None}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    speech_handler.launch_interface(port=7860)