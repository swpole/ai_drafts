import gradio as gr
import whisper
import sounddevice as sd
import soundfile as sf
from datetime import datetime
import subprocess
import os
import tempfile
import json
import requests

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
try:
    whisper_model = whisper.load_model("base")
    print("–ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper: {e}")
    whisper_model = None

def get_installed_ollama_models():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Ollama —á–µ—Ä–µ–∑ API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π.
    """
    models_list = []
    
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ API Ollama
        response = requests.get("http://localhost:11434/api/tags", timeout=10)
        if response.status_code == 200:
            data = response.json()
            models_list = [model["name"] for model in data.get("models", [])]
            print(f"–ù–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ API: {models_list}")
            return models_list
    except requests.exceptions.RequestException as e:
        print(f"API Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
        pass
    
    try:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É ollama list
        result = subprocess.run(["ollama", "list"], 
                              capture_output=True, 
                              text=True, 
                              timeout=10)
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if line.strip():
                    model_name = line.split()[0]
                    models_list.append(model_name)
            print(f"–ù–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ CLI: {models_list}")
            return models_list
    except (subprocess.TimeoutExpired, FileNotFoundError, Exception) as e:
        print(f"–ö–æ–º–∞–Ω–¥–∞ ollama list –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
        pass
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
    print("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
    return ["llama3.1", "gemma2", "mistral"]

def check_ollama_running():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä Ollama.
    """
    try:
        response = requests.get("http://localhost:11434/api/version", timeout=5)
        return response.status_code == 200
    except:
        return False

def start_ollama_server():
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä Ollama.
    """
    try:
        print("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Ollama...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –û–°)
        if os.name == 'nt':  # Windows
            subprocess.Popen(["ollama", "serve"], 
                           creationflags=subprocess.CREATE_NO_WINDOW)
        else:  # Linux/Mac
            subprocess.Popen(["ollama", "serve"], 
                           stdout=subprocess.DEVNULL, 
                           stderr=subprocess.DEVNULL)
        
        # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        import time
        time.sleep(3)
        return check_ollama_running()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Ollama: {e}")
        return False

def record_audio(duration=5, sample_rate=16000):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ WAV.
    """
    print(f"–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
    try:
        # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ
        audio_data = sd.rec(int(duration * sample_rate), 
                           samplerate=sample_rate, 
                           channels=1, 
                           dtype='int16')
        sd.wait()  # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".wav")
        sf.write(temp_file.name, audio_data, sample_rate)
        print(f"–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {temp_file.name}")
        return temp_file.name
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: {e}")
        return None

def transcribe_audio(audio_file_path):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ Whisper.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    if audio_file_path is None:
        return "–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω."
    
    if whisper_model is None:
        return "–ú–æ–¥–µ–ª—å Whisper –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."

    print(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ: {audio_file_path}")
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å
        result = whisper_model.transcribe(audio_file_path, language="ru")
        transcribed_text = result["text"]
        print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {transcribed_text}")
        return transcribed_text
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}"

def query_ollama(model_name, prompt):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å (prompt) –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å Ollama –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    """
    if not prompt.strip():
        return "–ó–∞–ø—Ä–æ—Å –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –∞—É–¥–∏–æ."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä Ollama
    if not check_ollama_running():
        if not start_ollama_server():
            return "–°–µ—Ä–≤–µ—Ä Ollama –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Ollama –≤—Ä—É—á–Ω—É—é."

    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–¥–µ–ª–∏ {model_name}: {prompt}")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API Ollama –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        payload = {
            "model": model_name,
            "prompt": prompt,
            "stream": False
        }
        
        response = requests.post("http://localhost:11434/api/generate", 
                               json=payload, 
                               timeout=120)
        
        if response.status_code == 200:
            result = response.json()
            return result.get("response", "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        else:
            return f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
            
    except requests.exceptions.Timeout:
        return "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except requests.exceptions.RequestException as e:
        return f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Ollama: {str(e)}"
    except Exception as e:
        return f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

def refresh_models():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.
    """
    return gr.Dropdown(choices=get_installed_ollama_models())

def create_gradio_interface():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    available_models = get_installed_ollama_models()
    
    with gr.Blocks(title="–ì–æ–ª–æ—Å–æ–≤–æ–π LLM –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", theme="soft") as demo:
        gr.Markdown("# üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö LLM —á–µ—Ä–µ–∑ Ollama")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama
        ollama_status = "üü¢ –ó–∞–ø—É—â–µ–Ω" if check_ollama_running() else "üî¥ –ù–µ –∑–∞–ø—É—â–µ–Ω"
        gr.Markdown(f"**–°—Ç–∞—Ç—É—Å Ollama:** {ollama_status}")

        with gr.Row():
            # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ Ollama —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            with gr.Column(scale=3):
                model_dropdown = gr.Dropdown(
                    choices=available_models, 
                    value=available_models[0] if available_models else None,
                    label="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Ollama",
                    interactive=True
                )
            with gr.Column(scale=1):
                refresh_button = gr.Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")

        with gr.Row():
            # –ë–ª–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
            with gr.Column(scale=1):
                audio_output = gr.Audio(
                    label="–ó–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ", 
                    type="filepath", 
                    interactive=True
                )
                record_button = gr.Button("üéôÔ∏è –ó–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (5 —Å–µ–∫)")
                duration_slider = gr.Slider(1, 30, value=5, 
                                          label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ (—Å–µ–∫)")

            # –ë–ª–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º
            with gr.Column(scale=2):
                text_input = gr.Textbox(
                    label="–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ (–º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)", 
                    lines=5, 
                    placeholder="–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å..."
                )
                transcribe_button = gr.Button("üîä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç")
                submit_button = gr.Button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å LLM")

        # –ë–ª–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
        response_output = gr.Textbox(
            label="–û—Ç–≤–µ—Ç LLM", 
            lines=10, 
            interactive=False
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        record_button.click(
            fn=record_audio, 
            inputs=duration_slider,
            outputs=audio_output
        )

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ
        transcribe_button.click(
            fn=transcribe_audio, 
            inputs=audio_output, 
            outputs=text_input
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM
        submit_button.click(
            fn=query_ollama, 
            inputs=[model_dropdown, text_input], 
            outputs=response_output
        )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        refresh_button.click(
            fn=refresh_models,
            outputs=model_dropdown
        )

    return demo

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if not check_ollama_running():
        print("–°–µ—Ä–≤–µ—Ä Ollama –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü—ã—Ç–∞—é—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å...")
        if start_ollama_server():
            print("–°–µ—Ä–≤–µ—Ä Ollama —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä Ollama. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    demo = create_gradio_interface()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    print("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print("–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:7860 –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ")
    
    try:
        demo.launch(
            server_name="0.0.0.0",
            share=False,
            debug=True
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ—Ä—Ç 7860 —Å–≤–æ–±–æ–¥–µ–Ω –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç")