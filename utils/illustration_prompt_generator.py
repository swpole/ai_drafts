# app.py
from llm_interface import LLMInterface
import gradio as gr
import re

class IllustrationPromptGenerator:
    def __init__(self):
        self.base_prompts = {
            "–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π": """–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–µ—Ä–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã:
1. –†–∞–∑–±–µ–π —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã, –∫–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ 4 —Å–µ–∫—É–Ω–¥—ã —á—Ç–µ–Ω–∏—è (‚âà50‚Äì60 —Å–ª–æ–≤).
2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞:
   - –í—ã–≤–µ–¥–∏ —Å–∞–º —Ç–µ–∫—Å—Ç —Å–µ–≥–º–µ–Ω—Ç–∞.
   - –°–æ—Å—Ç–∞–≤—å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –≤–∫–ª—é—á–∞—é—â–∏–π:
     ‚Ä¢ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –∏—Ö –¥–µ–π—Å—Ç–≤–∏–π;
     ‚Ä¢ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (—Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ, —Ä–∞–¥–æ—Å—Ç–Ω–æ, —Ç—Ä–µ–≤–æ–∂–Ω–æ –∏ —Ç.–¥.);
     ‚Ä¢ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å: {style};
     ‚Ä¢ –¥–µ—Ç–∞–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Ñ–æ–Ω–∞;
     ‚Ä¢ —Ü–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ).

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

**–°–µ–≥–º–µ–Ω—Ç 1 (—Ç–µ–∫—Å—Ç)**
- –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ‚Ä¶

**–°–µ–≥–º–µ–Ω—Ç 2 (—Ç–µ–∫—Å—Ç)**
- –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ‚Ä¶

‚Ä¶–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤–µ—Å—å —Ç–µ–∫—Å—Ç.

–ò—Ç–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–¥–∞–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å.""",

            "–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π": """–¢—ã ‚Äî —Ä–µ–∂–∏—Å—Å–µ—Ä –∏ —Ö—É–¥–æ–∂–Ω–∏–∫-—Ä–∞—Å–∫–∞–¥—Ä–æ–≤—â–∏–∫. –ü—Ä–µ–≤—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã:
1. –†–∞–∑–±–µ–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ü–µ–Ω—ã (–∫–∞–∂–¥–∞—è ‚âà50-60 —Å–ª–æ–≤).
2. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã —É–∫–∞–∂–∏:
   - –¢–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
   - –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:
     ‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –∫–∞–¥—Ä–∞ (–∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω, –æ–±—â–∏–π –ø–ª–∞–Ω –∏ —Ç.–¥.)
     ‚Ä¢ –û—Å–≤–µ—â–µ–Ω–∏–µ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞
     ‚Ä¢ –†–∞–∫—É—Ä—Å –∏ —É–≥–æ–ª —Å—ä–µ–º–∫–∏
     ‚Ä¢ –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å: {style}
     ‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω—ã

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

**–°—Ü–µ–Ω–∞ 1 (—Ç–µ–∫—Å—Ç)**
- –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç: ‚Ä¶

**–°—Ü–µ–Ω–∞ 2 (—Ç–µ–∫—Å—Ç)**
- –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç: ‚Ä¶

–°–æ–∑–¥–∞–π –≤–∏–∑—É–∞–ª—å–Ω–æ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è, –≥–æ—Ç–æ–≤—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.""",

            "Cinematic (English)": """You are a director and storyboard artist. Transform text into cinematic prompts for image generation.

Working rules:
1. Break the text into scenes (each ‚âà50-60 words).
2. For each scene specify:
   - Original text
   - Visual prompt with elements:
     ‚Ä¢ Frame composition (close-up, wide shot, etc.)
     ‚Ä¢ Lighting and atmosphere
     ‚Ä¢ Camera angle and perspective
     ‚Ä¢ Artistic style: {style}
     ‚Ä¢ Emotional impact of the scene

Response format:

**Scene 1 (text)**
- Cinematic prompt: ‚Ä¶

**Scene 2 (text)**
- Cinematic prompt: ‚Ä¶

Create visually rich descriptions ready for image generation.""",

            "Detailed Illustration (English)": """You are an expert in text visualization and creating illustration prompts.
Your task is to transform long text into a series of image generation prompts.

Working rules:
1. Divide the text into consecutive segments, each about 4 seconds of reading (‚âà50‚Äì60 words).
2. For each segment:
   - Output the segment text itself.
   - Create an illustration prompt including:
     ‚Ä¢ description of the scene, characters and their actions;
     ‚Ä¢ atmosphere and mood (mysterious, joyful, anxious, etc.);
     ‚Ä¢ artistic style: {style};
     ‚Ä¢ environment and background details;
     ‚Ä¢ color palette and composition (where appropriate).

Response format:

**Segment 1 (text)**
- Illustration prompt: ‚Ä¶

**Segment 2 (text)**
- Illustration prompt: ‚Ä¶

‚Ä¶and so on until the entire text is processed.

The result should be a list of prompts for illustration generation that can be fed directly into a graphics model."""
        }
        
        self.styles_ru = [
            "—Ä–µ–∞–ª–∏–∑–º",
            "–∫–Ω–∏–∂–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è",
            "—Ü–∏—Ñ—Ä–æ–≤–∞—è –∂–∏–≤–æ–ø–∏—Å—å",
            "–∞–∫–≤–∞—Ä–µ–ª—å",
            "–∫–æ–º–∏–∫—Å",
            "–º–∏–Ω–∏–º–∞–ª–∏–∑–º",
            "—Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞"
        ]
        
        self.styles_en = [
            "realism",
            "book illustration", 
            "digital painting",
            "watercolor",
            "comic",
            "minimalism",
            "stylized graphics"
        ]

        self.prompt_types = list(self.base_prompts.keys())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–º–ø—Ç–∞
        self.prompt_languages = {
            "–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π": "ru",
            "–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π": "ru", 
            "Cinematic (English)": "en",
            "Detailed Illustration (English)": "en"
        }
        
        self.illustration_interface = LLMInterface(
            title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤",
            heading="–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π",
            prompt_label="üìå –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
            prompt_default=self.base_prompts["–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π"].format(style="—Ä–µ–∞–ª–∏–∑–º"),
            input_label="–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç",
            input_placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...",
            generate_button_text="‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã",
            output_label="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π"
        )

    def get_styles_for_prompt_type(self, prompt_type):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∏–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–º–ø—Ç–∞"""
        language = self.prompt_languages.get(prompt_type, "ru")
        if language == "en":
            return self.styles_en
        else:
            return self.styles_ru

    def get_default_style(self, prompt_type):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–º–ø—Ç–∞"""
        language = self.prompt_languages.get(prompt_type, "ru")
        if language == "en":
            return "realism"
        else:
            return "—Ä–µ–∞–ª–∏–∑–º"

    def update_prompt(self, prompt_type, style):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏ —Å—Ç–∏–ª—è"""
        base_prompt = self.base_prompts.get(prompt_type, self.base_prompts["–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π"])
        return base_prompt.format(style=style)

    def update_interface(self, prompt_type):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ –ø—Ä–æ–º–ø—Ç–∞"""
        styles = self.get_styles_for_prompt_type(prompt_type)
        default_style = self.get_default_style(prompt_type)
        updated_prompt = self.update_prompt(prompt_type, default_style)
        
        return (
            gr.update(choices=styles, value=default_style),  # style_dropdown
            updated_prompt  # prompt_box
        )

    def generate_prompts(self, model_name, prompt, input_text):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤"""
        full_output = self.illustration_interface.generate(model_name, prompt, input_text)
        segments = []
        titles = []
        current_segment = ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
        segment_patterns = {
            "ru": r"\*\*–°–µ–≥–º–µ–Ω—Ç|\*\*–°—Ü–µ–Ω–∞",
            "en": r"\*\*Segment|\*\*Scene"
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        current_language = "ru"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for prompt_type, language in self.prompt_languages.items():
            if prompt_type in prompt:
                current_language = language
                break
        
        segment_pattern = segment_patterns.get(current_language, r"\*\*–°–µ–≥–º–µ–Ω—Ç|\*\*–°—Ü–µ–Ω–∞|\*\*Segment|\*\*Scene")
        
        for line in full_output.split("\n"):
            if re.search(segment_pattern, line, re.IGNORECASE):
                if current_segment:
                    segments.append(current_segment.strip())
                current_segment = line + "\n"
                titles.append(line)
            else:
                current_segment += line + "\n"
                
        if current_segment:
            segments.append(current_segment.strip())
            
        return full_output, titles, segments

    def run_generation(self, model_name, prompt_type, style, input_text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"""
        prompt = self.update_prompt(prompt_type, style)
        full_output, titles, segments = self.generate_prompts(model_name, prompt, input_text)
        return full_output, gr.update(choices=titles, value=titles[0] if titles else None), segments, prompt

    def show_scene_prompt(self, selected_title, segments):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω—ã"""
        if not selected_title or not segments:
            return ""
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–µ–≥–º–µ–Ω—Ç–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —è–∑—ã–∫–∞
        match = re.search(r"(–°–µ–≥–º–µ–Ω—Ç|–°—Ü–µ–Ω–∞|Segment|Scene)\s*(\d+)", selected_title, re.IGNORECASE)
        if not match:
            return ""
        index = int(match.group(2)) - 1
        if 0 <= index < len(segments):
            segment_text = segments[index]
            lines = segment_text.split("\n")
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–º–ø—Ç–æ–º (—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö)
            prompt_keywords = [
                "–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç", "–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç", 
                "Illustration prompt", "Cinematic prompt", "–ø—Ä–æ–º–ø—Ç:"
            ]
            for i, line in enumerate(lines):
                if any(keyword in line for keyword in prompt_keywords):
                    return "\n".join(lines[i:]).strip()
        
        return segment_text if 0 <= index < len(segments) else ""

    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        models = self.illustration_interface.get_models()

        with gr.Blocks(title=self.illustration_interface.title) as interface:
            gr.Markdown(f"## üìù {self.illustration_interface.heading}")

            with gr.Row():
                model_dropdown = gr.Dropdown(
                    choices=models,
                    value=models[0] if models else None,
                    label="–ú–æ–¥–µ–ª—å"
                )
                

                
            with gr.Accordion(self.illustration_interface.prompt_label, open=False):

                with gr.Row():
                    prompt_type_dropdown = gr.Dropdown(
                        choices=self.prompt_types,
                        value=self.prompt_types[0],
                        label="–¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞"
                    )
                    style_dropdown = gr.Dropdown(
                        choices=self.styles_ru,
                        value="—Ä–µ–∞–ª–∏–∑–º",
                        label="–°—Ç–∏–ª—å"
                    )                
                prompt_box = gr.Textbox(
                    label=self.illustration_interface.prompt_label,
                    value=self.illustration_interface.prompt_default,
                    lines=5,
                    max_lines=5
                )

            input_box = gr.Textbox(
                label=self.illustration_interface.input_label,
                placeholder=self.illustration_interface.input_placeholder,
                lines=5,
                max_lines=5,
                interactive=True, show_copy_button=True
            )
            
            run_button = gr.Button(self.illustration_interface.generate_button_text)
            
            output_box = gr.Textbox(
                label=self.illustration_interface.output_label,
                lines=5,
                max_lines=5, 
                interactive=True, 
                show_copy_button=True
            )
            
            scene_dropdown = gr.Dropdown(choices=[], label="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω—É")
            
            self.scene_prompt_box = gr.Textbox(
                label="–ü—Ä–æ–º–ø—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω—ã", 
                lines=5,
                max_lines=5,
                interactive=True,
                show_copy_button=True
            )
            
            segments_state = gr.State([])

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∏ –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ –ø—Ä–æ–º–ø—Ç–∞
            prompt_type_dropdown.change(
                fn=self.update_interface,
                inputs=[prompt_type_dropdown],
                outputs=[style_dropdown, prompt_box]
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∏–ª—è
            style_dropdown.change(
                fn=self.update_prompt, 
                inputs=[prompt_type_dropdown, style_dropdown], 
                outputs=prompt_box
            )

            # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
            run_button.click(
                fn=self.run_generation,
                inputs=[model_dropdown, prompt_type_dropdown, style_dropdown, input_box],
                outputs=[output_box, scene_dropdown, segments_state, prompt_box]
            )

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω—ã
            scene_dropdown.change(
                fn=self.show_scene_prompt,
                inputs=[scene_dropdown, segments_state],
                outputs=self.scene_prompt_box
            )

        return interface, self.scene_prompt_box

if __name__ == "__main__":
    generator = IllustrationPromptGenerator()
    interface, p = generator.create_interface()
    interface.launch()