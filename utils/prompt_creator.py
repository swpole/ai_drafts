# app.py
from llm_interface import LLMInterface
import gradio as gr

base_prompt = """–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–µ—Ä–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã:
1. –†–∞–∑–±–µ–π —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã, –∫–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ 4 —Å–µ–∫—É–Ω–¥—ã —á—Ç–µ–Ω–∏—è (‚âà50‚Äì60 —Å–ª–æ–≤).
2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞:
   - –í—ã–≤–µ–¥–∏ —Å–∞–º —Ç–µ–∫—Å—Ç —Å–µ–≥–º–µ–Ω—Ç–∞.
   - –°–æ—Å—Ç–∞–≤—å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –≤–∫–ª—é—á–∞—é—â–∏–π:
     ‚Ä¢ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –∏—Ö –¥–µ–π—Å—Ç–≤–∏–π;
     ‚Ä¢ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (—Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ, —Ä–∞–¥–æ—Å—Ç–Ω–æ, —Ç—Ä–µ–≤–æ–∂–Ω–æ –∏ —Ç.–¥.);
     ‚Ä¢ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å: {style};
     ‚Ä¢ –¥–µ—Ç–∞–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Ñ–æ–Ω–∞;
     ‚Ä¢ —Ü–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ).

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

**–°–µ–≥–º–µ–Ω—Ç 1 (—Ç–µ–∫—Å—Ç)**
- –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ‚Ä¶

**–°–µ–≥–º–µ–Ω—Ç 2 (—Ç–µ–∫—Å—Ç)**
- –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ‚Ä¶

‚Ä¶–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤–µ—Å—å —Ç–µ–∫—Å—Ç.

–ò—Ç–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–¥–∞–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å."""

styles = [
    "—Ä–µ–∞–ª–∏–∑–º",
    "–∫–Ω–∏–∂–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è",
    "—Ü–∏—Ñ—Ä–æ–≤–∞—è –∂–∏–≤–æ–ø–∏—Å—å",
    "–∞–∫–≤–∞—Ä–µ–ª—å",
    "–∫–æ–º–∏–∫—Å",
    "–º–∏–Ω–∏–º–∞–ª–∏–∑–º",
    "—Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞"
]

illustration_interface = LLMInterface(
    title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤",
    heading="–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π",
    prompt_label="üìå –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
    prompt_default=base_prompt.format(style="—Ä–µ–∞–ª–∏–∑–º"),
    input_label="–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç",
    input_placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...",
    generate_button_text="‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã",
    output_label="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π"
)

if __name__ == "__main__":
    models = illustration_interface.get_models()

    with gr.Blocks(title=illustration_interface.title) as demo:
        gr.Markdown(f"## üìù {illustration_interface.heading}")

        with gr.Row():
            model_dropdown = gr.Dropdown(
                choices=models,
                value=models[0] if models else None,
                label="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å"
            )
            style_dropdown = gr.Dropdown(
                choices=styles,
                value="—Ä–µ–∞–ª–∏–∑–º",
                label="–í—ã–±–µ—Ä–∏—Ç–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å"
            )

        prompt_box = gr.Textbox(
            label=illustration_interface.prompt_label,
            value=illustration_interface.prompt_default,
            lines=7
        )
        input_box = gr.Textbox(
            label=illustration_interface.input_label,
            placeholder=illustration_interface.input_placeholder,
            lines=5
        )
        run_button = gr.Button(illustration_interface.generate_button_text)
        output_box = gr.Textbox(
            label=illustration_interface.output_label,
            lines=15
        )
        scene_dropdown = gr.Dropdown(choices=[], label="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω—É")
        scene_prompt_box = gr.Textbox(label="–ü—Ä–æ–º–ø—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω—ã", lines=10, show_copy_button=True)
        segments_state = gr.State([])

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∏–ª—è
        def update_prompt(style):
            return base_prompt.format(style=style)
        style_dropdown.change(fn=update_prompt, inputs=style_dropdown, outputs=prompt_box)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        def generate_prompts(model_name, prompt, input_text):
            full_output = illustration_interface.generate(model_name, prompt, input_text)
            segments = []
            titles = []
            current_segment = ""
            for line in full_output.split("\n"):
                if line.startswith("**–°–µ–≥–º–µ–Ω—Ç"):
                    if current_segment:
                        segments.append(current_segment.strip())
                    current_segment = line + "\n"
                    titles.append(line)
                else:
                    current_segment += line + "\n"
            if current_segment:
                segments.append(current_segment.strip())
            return full_output, titles, segments

        # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
        def run_generation(model_name, prompt, input_text):
            full_output, titles, segments = generate_prompts(model_name, prompt, input_text)
            return full_output, gr.update(choices=titles, value=titles[0] if titles else None), segments


        run_button.click(
            fn=run_generation,
            inputs=[model_dropdown, prompt_box, input_box],
            outputs=[output_box, scene_dropdown, segments_state]
        )


        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω—ã
        def show_scene_prompt(selected_title, segments):
            if not selected_title or not segments:
                return ""
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–µ–≥–º–µ–Ω—Ç–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ "–°–µ–≥–º–µ–Ω—Ç"
            import re
            match = re.search(r"–°–µ–≥–º–µ–Ω—Ç\s*(\d+)", selected_title)
            if not match:
                return ""
            index = int(match.group(1)) - 1
            if index >= len(segments):
                return ""
            
            segment_text = segments[index]
            lines = segment_text.split("\n")
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å "–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ –Ω–µ—ë
            for i, line in enumerate(lines):
                if "–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç" in line:
                    return "\n".join(lines[i+1:]).strip()
            
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            return ""
        
        def show_scene_prompt2(selected_title, segments):
            if not selected_title or not segments:
                return ""
            index = int(selected_title.split("–°–µ–≥–º–µ–Ω—Ç ")[1].split()[0]) - 1
            if index >= len(segments):
                return ""
            segment_text = segments[index]
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = segment_text.split("\n")
            # –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å '- **–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:**' –∏ –≤–∑—è—Ç—å –≤—Å—ë –ø–æ—Å–ª–µ –Ω–µ—ë
            try:
                start_idx = next(i for i, line in enumerate(lines) if line.strip().startswith("- **–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:**"))
                cleaned_lines = lines[start_idx + 1:]
            except StopIteration:
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Å–µ–≥–º–µ–Ω—Ç
                cleaned_lines = lines
            return "\n".join(cleaned_lines).strip()


        scene_dropdown.change(
            fn=show_scene_prompt,
            inputs=[scene_dropdown, segments_state],
            outputs=scene_prompt_box
        )

    demo.launch()
