import gradio as gr
import os
import pickle

class DocumentStore:
    def __init__(self, storage_dir="debug/databases"):
        self.documents = {}  # –∫–ª—é—á: –∏–º—è —Ñ–∞–π–ª–∞, –∑–Ω–∞—á–µ–Ω–∏–µ: —Ç–µ–∫—Å—Ç
        self.storage_dir = storage_dir
        os.makedirs(self.storage_dir, exist_ok=True)

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
    def add_document(self, file_path):
        if not file_path:
            return self.list_documents(), gr.update(choices=list(self.documents.keys()))

        file_name = os.path.basename(file_path)
        try:
            with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                content = f.read()
            self.documents[file_name] = content
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", gr.update(choices=list(self.documents.keys()))

        return self.list_documents(), gr.update(choices=list(self.documents.keys()), value=file_name)

    # --- –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
    def remove_document(self, file_name):
        if file_name in self.documents:
            del self.documents[file_name]
        return self.list_documents(), gr.update(choices=list(self.documents.keys()), value=None)

    # --- –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ / —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–∞–∑—ã ---
    def list_documents(self):
        if not self.documents:
            return "(–ë–∞–∑–∞ –ø—É—Å—Ç–∞)"
        return "\n".join([f"{name}: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤" for name, text in self.documents.items()])

    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –Ω–∞ –¥–∏—Å–∫ ---
    def save_database(self, db_name):
        if not db_name:
            return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –±–∞–∑—ã.", gr.update()
        path = os.path.join(self.storage_dir, db_name + ".pkl")
        with open(path, "wb") as f:
            pickle.dump(self.documents, f)
        return f"‚úÖ –ë–∞–∑–∞ '{db_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", gr.update(choices=self.list_saved_databases(), value=db_name)

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã —Å –¥–∏—Å–∫–∞ ---
    def load_database(self, db_name):
        path = os.path.join(self.storage_dir, db_name + ".pkl")
        if not os.path.exists(path):
            return f"‚ùå –ë–∞–∑–∞ '{db_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", gr.update()
        with open(path, "rb") as f:
            self.documents = pickle.load(f)
        return f"‚úÖ –ë–∞–∑–∞ '{db_name}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞.\n{self.list_documents()}", gr.update(choices=list(self.documents.keys()))

    # --- –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–∞–∑ ---
    def list_saved_databases(self):
        files = os.listdir(self.storage_dir)
        return [f.replace(".pkl", "") for f in files if f.endswith(".pkl")]


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ---
store = DocumentStore()

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio ---
with gr.Blocks(title="RAG Document Store") as demo:
    gr.Markdown("## üìö –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ RAG")

    with gr.Row():
        with gr.Column(scale=2):
            file_input = gr.File(
                label="–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (.txt)",
                file_types=[".txt"],
                type="filepath"  # ‚úÖ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–º–µ—Å—Ç–æ –±–∞–π—Ç–æ–≤
            )
            add_btn = gr.Button("–î–æ–±–∞–≤–∏—Ç—å")
            remove_doc = gr.Dropdown(label="–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", choices=[], interactive=True)
            remove_btn = gr.Button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")

            output_display = gr.Textbox(label="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã", interactive=False, lines=10)

        with gr.Column(scale=1):
            db_name_input = gr.Textbox(label="–ò–º—è –±–∞–∑—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è / –∑–∞–≥—Ä—É–∑–∫–∏")
            save_btn = gr.Button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑—É")
            saved_dbs = gr.Dropdown(choices=store.list_saved_databases(), label="üìÇ –í—ã–±—Ä–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –±–∞–∑—É")
            load_btn = gr.Button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –±–∞–∑—É")
            refresh_btn = gr.Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–∑")

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    add_btn.click(store.add_document, inputs=[file_input], outputs=[output_display, remove_doc])
    remove_btn.click(store.remove_document, inputs=[remove_doc], outputs=[output_display, remove_doc])
    save_btn.click(store.save_database, inputs=[db_name_input], outputs=[output_display, saved_dbs])
    load_btn.click(store.load_database, inputs=[saved_dbs], outputs=[output_display, remove_doc])
    refresh_btn.click(lambda: gr.update(choices=store.list_saved_databases()), outputs=[saved_dbs])

if __name__ == "__main__":
    demo.launch(server_name="0.0.0.0", share=False)
