#input - images and audio
#output - video

import gradio as gr
from moviepy import * #python -m pip install moviepy
import tempfile
import os

class VideoCreatorOffline:
    def __init__(self, num_parallel_tracks=2):
        """
        –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∞–º–∏
        
        Args:
            num_parallel_tracks (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ—Ç—Ä–µ–∫–æ–≤
        """
        self.num_parallel_tracks = num_parallel_tracks
        self.audio_tracks = [[] for _ in range(num_parallel_tracks)]

        self.create_interface()

        pass
        
    def insert_image(self, gallery_images, new_img, selected_index, before: bool):
        """
        –í—Å—Ç–∞–≤–ª—è–µ—Ç new_img –ª–∏–±–æ –ø–µ—Ä–µ–¥ (–µ—Å–ª–∏ before=True), –ª–∏–±–æ –ø–æ—Å–ª–µ (if before=False)
        –ø–æ–∑–∏—Ü–∏–∏ selected_index –≤ gallery_images.
        –ï—Å–ª–∏ selected_index is None –∏–ª–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω–µ—Ü.
        """
        imgs = list(gallery_images) if gallery_images else []
        if not new_img:
            return imgs
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∞–ª–∏–¥–µ–Ω
        if selected_index is not None and 0 <= selected_index < len(imgs):
            if before:
                imgs.insert(selected_index, new_img)
            else:
                selected_index+=1
                imgs.insert(selected_index, new_img)
        else:
            # –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–≤–∞–ª–∏–¥–µ–Ω ‚Äî –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü
            imgs.append(new_img)
        return imgs

    def delete_image(self, gallery_images, selected_index):
        """
        –£–¥–∞–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.
        –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –≥–∞–ª–µ—Ä–µ—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        """
        imgs = list(gallery_images) if gallery_images else []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
        if selected_index is not None and 0 <= selected_index < len(imgs):
            imgs.pop(selected_index)
        
        return imgs

    def insert_audio(self, track_index, audio_files, new_audio, selected_index, before: bool):
        """
        –í—Å—Ç–∞–≤–ª—è–µ—Ç new_audio –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫ –ª–∏–±–æ –ø–µ—Ä–µ–¥ (–µ—Å–ª–∏ before=True), 
        –ª–∏–±–æ –ø–æ—Å–ª–µ (if before=False) –ø–æ–∑–∏—Ü–∏–∏ selected_index.
        """
        audio_list = list(audio_files) if audio_files else []
        if not new_audio:
            return audio_list
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∞–ª–∏–¥–µ–Ω
        if selected_index is not None and 0 <= selected_index < len(audio_list):
            if before:
                audio_list.insert(selected_index, new_audio)
            else:
                audio_list.insert(selected_index + 1, new_audio)
        else:
            # –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–≤–∞–ª–∏–¥–µ–Ω ‚Äî –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü
            audio_list.append(new_audio)
        return audio_list

    def delete_audio(self, track_index, audio_files, selected_index):
        """
        –£–¥–∞–ª—è–µ—Ç –∞—É–¥–∏–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.
        """
        audio_list = list(audio_files) if audio_files else []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
        if selected_index is not None and 0 <= selected_index < len(audio_list):
            audio_list.pop(selected_index)
        
        return audio_list

    def create_video_with_transitions(self, gallery_images, duration_per_image, 
                                    transition_duration, audio_tracks, output_filename="output_video.mp4"):
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–ª–∞–≤–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∑–≤—É–∫–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–æ–π.
        """
        if not gallery_images:
            raise gr.Error("–ì–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
        
        if duration_per_image <= 0:
            raise gr.Error("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        
        if transition_duration < 0:
            raise gr.Error("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
        
        if transition_duration * 2 >= duration_per_image:
            raise gr.Error("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        
        clips = []
        
        for i, img_info in enumerate(gallery_images):
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            if isinstance(img_info, tuple) and len(img_info) == 2:
                img_path = img_info[0]
            else:
                img_path = img_info
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø
            clip = (
                ImageClip(img_path, duration=duration_per_image)
                .resized(width=640, height=480).with_effects([vfx.CrossFadeIn(1), vfx.CrossFadeOut(1)])
            )
            
            clips.append(clip)
        
        # –°–∫–ª–µ–∏–≤–∞–µ–º —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        final_clip = concatenate_videoclips(clips, method="compose", padding=-transition_duration)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤—ã–µ –¥–æ—Ä–æ–∂–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        audio_clips_to_mix = []
        
        for track_index, audio_files in enumerate(audio_tracks):
            if audio_files and len(audio_files) > 0:
                try:
                    track_audio_clips = []
                    for audio_file in audio_files:
                        if audio_file:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                            audio_clip = AudioFileClip(audio_file)
                            track_audio_clips.append(audio_clip)
                    
                    if track_audio_clips:
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—É–¥–∏–æ–∫–ª–∏–ø—ã –≤ —Ç—Ä–µ–∫–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
                        if len(track_audio_clips) == 1:
                            track_audio = track_audio_clips[0]
                        else:
                            track_audio = concatenate_audioclips(track_audio_clips)
                        
                        # –û–±—Ä–µ–∑–∞–µ–º –∏–ª–∏ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –ø–æ–¥ –¥–ª–∏–Ω—É –≤–∏–¥–µ–æ
                        if track_audio.duration < final_clip.duration:
                            # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ, –µ—Å–ª–∏ –æ–Ω–æ –∫–æ—Ä–æ—á–µ –≤–∏–¥–µ–æ
                            track_audio = track_audio.loop(duration=final_clip.duration)
                        else:
                            # –û–±—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ, –µ—Å–ª–∏ –æ–Ω–æ –¥–ª–∏–Ω–Ω–µ–µ –≤–∏–¥–µ–æ
                            track_audio = track_audio.subclipped(0, final_clip.duration)
                        
                        audio_clips_to_mix.append(track_audio)
                        
                except Exception as e:
                    raise gr.Error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ —Ç—Ä–µ–∫–µ {track_index + 1}: {str(e)}")
        
        # –ú–∏–∫—à–∏—Ä—É–µ–º –≤—Å–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏ –≤–º–µ—Å—Ç–µ
        if audio_clips_to_mix:
            if len(audio_clips_to_mix) == 1:
                final_audio = audio_clips_to_mix[0]
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –∞—É–¥–∏–æ–∫–ª–∏–ø –∏–∑ –≤—Å–µ—Ö –¥–æ—Ä–æ–∂–µ–∫
                final_audio = CompositeAudioClip(audio_clips_to_mix)
            
            final_clip = final_clip.with_audio(final_audio)
        
        final_clip.write_videofile(output_filename, fps=24, logger=None)
        
        return output_filename

    def create_interface(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        
        def on_select(evt: gr.SelectData):
            return evt.index

        def on_audio_select(evt: gr.SelectData, track_index):
            return evt.index, track_index
        gr.Markdown("### üé¨ Video creator")
        with gr.Row():
            with gr.Column(scale=2):
                with gr.Row():
                    self.new_img_upload = gr.Image(sources="upload", type="filepath", label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É", height=100)
                    new_img_url = gr.Textbox(label="–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ URL", placeholder="https://...")
                
                with gr.Row():
                    btn_before = gr.Button("–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–∏–º")
                    btn_after = gr.Button("–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ")
                    btn_delete = gr.Button("–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π", variant="stop")   

                gr.Markdown("### –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                gallery = gr.Gallery(label="–ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", columns=6, interactive=True)
                selected_image = gr.State(value=None)
                

                
                gr.Markdown("### –ó–≤—É–∫–æ–≤—ã–µ –¥–æ—Ä–æ–∂–∫–∏")
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
                audio_tracks_ui = []
                selected_audios = []
                self.audio_uploaders = []
                
                for i in range(self.num_parallel_tracks):
                    with gr.Group():
                        gr.Markdown(f"#### –ê—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∞ {i+1}")
                        
                        audio_gallery = gr.Gallery(
                            label=f"–¢—Ä–µ–∫ {i+1} (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ)", 
                            columns=4, 
                            interactive=True,
                            object_fit="contain",
                            height=150
                        )
                        audio_tracks_ui.append(audio_gallery)
                        
                        selected_audio = gr.State(value=None)
                        selected_audios.append(selected_audio)
                        
                        with gr.Row():
                            audio_upload = gr.Audio(sources="upload", type="filepath", label=f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ –¥–ª—è —Ç—Ä–µ–∫–∞ {i+1}")
                            self.audio_uploaders.append(audio_upload)
                        
                        with gr.Row():
                            btn_audio_before = gr.Button(f"–î–æ–±–∞–≤–∏—Ç—å –≤ —Ç—Ä–µ–∫ {i+1} –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–∏–º")
                            btn_audio_after = gr.Button(f"–î–æ–±–∞–≤–∏—Ç—å –≤ —Ç—Ä–µ–∫ {i+1} –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ")
                            btn_audio_delete = gr.Button(f"–£–¥–∞–ª–∏—Ç—å –∏–∑ —Ç—Ä–µ–∫–∞ {i+1}", variant="stop")
                        
                        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞
                        audio_gallery.select(
                            lambda evt, idx=i: (evt.index, idx), 
                            [], 
                            [selected_audios[i], gr.State(value=i)]
                        )
                        
                        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞
                        btn_audio_before.click(
                            lambda audio_files, upload, sel_idx, track_idx=i: self.insert_audio(track_idx, audio_files, upload, sel_idx, before=True),
                            inputs=[audio_tracks_ui[i], self.audio_uploaders[i], selected_audios[i]],
                            outputs=audio_tracks_ui[i]
                        )

                        btn_audio_after.click(
                            lambda audio_files, upload, sel_idx, track_idx=i: self.insert_audio(track_idx, audio_files, upload, sel_idx, before=False),
                            inputs=[audio_tracks_ui[i], self.audio_uploaders[i], selected_audios[i]],
                            outputs=audio_tracks_ui[i]
                        )

                        btn_audio_delete.click(
                            lambda audio_files, sel_idx, track_idx=i: self.delete_audio(track_idx, audio_files, sel_idx),
                            inputs=[audio_tracks_ui[i], selected_audios[i]],
                            outputs=audio_tracks_ui[i]
                        )
            
            with gr.Column(scale=1):
                gr.Markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ")
                duration_per_image = gr.Slider(minimum=1, maximum=10, value=3, step=0.5, label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)")
                transition_duration = gr.Slider(minimum=0, maximum=2, value=0.5, step=0.1, label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ (—Å–µ–∫—É–Ω–¥—ã)")
                
                output_filename = gr.Textbox(value="output_video.mp4", label="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                
                btn_create_video = gr.Button("üé• –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", variant="primary", size="lg")
                
                video_output = gr.Video(label="–†–µ–∑—É–ª—å—Ç–∞—Ç")
                
                gr.Markdown(f"""
                **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
                1. –î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–∞–ª–µ—Ä–µ—é
                2. –î–æ–±–∞–≤—å—Ç–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏ –≤ {self.num_parallel_tracks} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–∞
                3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã
                4. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ"
                5. –°–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
                
                **–û –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–∞—Ö:**
                - –ê—É–¥–∏–æ –≤ –∫–∞–∂–¥–æ–º —Ç—Ä–µ–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
                - –í—Å–µ —Ç—Ä–µ–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
                - –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏ + –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                """)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        gallery.select(on_select, [], selected_image)

        btn_before.click(
            lambda gallery_images, upload, url, sel_idx: self.insert_image(gallery_images, upload or url, sel_idx, before=True),
            inputs=[gallery, self.new_img_upload, new_img_url, selected_image],
            outputs=gallery
        )

        btn_after.click(
            lambda gallery_images, upload, url, sel_idx: self.insert_image(gallery_images, upload or url, sel_idx, before=False),
            inputs=[gallery, self.new_img_upload, new_img_url, selected_image],
            outputs=gallery
        )

        btn_delete.click(
            self.delete_image,
            inputs=[gallery, selected_image],
            outputs=gallery
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
        def create_video_handler(gallery_images, duration, transition, *audio_track_data):
            try:
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ—Ç—Ä–µ–∫–∏
                all_audio_tracks = []
                for i in range(self.num_parallel_tracks):
                    audio_files = audio_track_data[i]
                    audio_paths = []
                    if audio_files:
                        for audio_info in audio_files:
                            if isinstance(audio_info, tuple) and len(audio_info) == 2:
                                audio_paths.append(audio_info[0])
                            else:
                                audio_paths.append(audio_info)
                    all_audio_tracks.append(audio_paths)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
                filename = audio_track_data[-1] if audio_track_data else "output_video.mp4"
                
                video_path = self.create_video_with_transitions(gallery_images, duration, transition, all_audio_tracks, filename)
                return video_path
            except Exception as e:
                raise gr.Error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {str(e)}")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
        input_components = [gallery, duration_per_image, transition_duration]
        for i in range(self.num_parallel_tracks):
            input_components.append(audio_tracks_ui[i])
        input_components.append(output_filename)

        btn_create_video.click(
            create_video_handler,
            inputs=input_components,
            outputs=video_output
        )

        return

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
if __name__ == "__main__":

    with gr.Blocks() as demo:
        video_creator = VideoCreatorOffline(num_parallel_tracks=2)        
            
    demo.launch()