import gradio as gr
from document_store_search_answer_saveindex_removedoc import DocumentStore, QueryPreprocessor, DocumentSearcher, AnswerGenerator


class RAGChatUI:
    def __init__(self):
        self.store = DocumentStore()
        self.preprocessor = QueryPreprocessor()
        self.searcher = DocumentSearcher(self.store)
        self.generator = AnswerGenerator()

    # === –õ–æ–≥–∏–∫–∞ ===
    def refresh_indexes(self):
        return gr.update(choices=self.searcher.list_indexes())

    def load_index(self, index_name):
        msg = self.searcher.load_index(index_name)
        provider = self.searcher.embedding_provider
        return f"{msg}\n\nüîπ –ú–µ—Ç–æ–¥ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {provider}"

    def answer_query(
        self,
        message,
        history,
        llm_provider,
        ollama_model,
        gemini_model,
        task_prompt,
    ):
        """
        Chat-RAG —Å –∏—Å—Ç–æ—Ä–∏–µ–π, –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏–µ–º (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π).
        """
        if not message.strip():
            return "‚ùå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."

        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        history_text = "\n".join(
            [f"{'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if role == 'user' else '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'}: {content}"
             for role, content in history]
        )

        # –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ
        clean_query = self.preprocessor.preprocess(message)
        search_results = self.searcher.search(clean_query)
        if isinstance(search_results, str):
            return search_results

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        context_texts = [snippet for _, _, snippet in search_results]
        context = "\n\n".join(context_texts)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
        full_prompt = (
            "–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n"
            "–°–ª–µ–¥—É–π –∑–∞–¥–∞–Ω–∏—é –Ω–∏–∂–µ.\n\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {task_prompt}\n\n"
            f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n{history_text}\n\n"
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n{context}\n\n"
            f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}\n\n"
            "–û—Ç–≤–µ—Ç:"
        )

        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        model = ollama_model if llm_provider == "ollama" else gemini_model

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
        answer = self.generator.generate_answer_full(
            llm_provider,
            model,
            full_prompt,        # —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        )

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–∫–∂–µ —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏)
        doc_info = "\n".join([f"üìÑ {n} ({s})" for n, s, _ in search_results])
        return f"{answer}\n\n\nüîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n{doc_info}"

    # === UI ===
    def create_ui(self):
        with gr.Blocks(title="RAG Chat Interface") as ui:
            gr.Markdown("## üí¨ Chat with RAG System\nChat + Retrieval + Instruction = Powerful Contextual Assistant")

            with gr.Row():
                with gr.Column(scale=1):
                    index_dropdown = gr.Dropdown(
                        label="üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥–µ–∫—Å",
                        choices=self.searcher.list_indexes()
                    )
                    refresh_btn = gr.Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤")
                    load_msg = gr.Textbox(label="–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏", interactive=False)

                    task_prompt = gr.Textbox(
                        label="üß© –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏",
                        value="–î–∞–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ. –ü—Ä–∏–≤–æ–¥–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º, –Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏ –∑–∞ —Ä–∞–º–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.",
                        lines=3
                    )

                    llm_provider = gr.Radio(
                        ["ollama", "gemini"],
                        label="–ü—Ä–æ–≤–∞–π–¥–µ—Ä –º–æ–¥–µ–ª–∏",
                        value="ollama"
                    )
                    ollama_models = gr.Dropdown(
                        choices=self.generator.ollama_models,
                        label="–ú–æ–¥–µ–ª—å Ollama",
                        value=self.generator.ollama_models[0]
                    )
                    gemini_models = gr.Dropdown(
                        choices=self.generator.gemini_models,
                        label="–ú–æ–¥–µ–ª—å Gemini",
                        value=self.generator.gemini_models[0]
                    )

                with gr.Column(scale=3):
                    chat = gr.ChatInterface(
                        fn=self.answer_query,
                        additional_inputs=[
                            llm_provider,
                            ollama_models,
                            gemini_models,
                            task_prompt,
                        ],
                        title="üß† RAG Assistant",
                        description="–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤.",
                    )

            # === Handlers ===
            refresh_btn.click(self.refresh_indexes, outputs=[index_dropdown])
            index_dropdown.change(self.load_index, inputs=[index_dropdown], outputs=[load_msg])

        return ui


if __name__ == "__main__":
    app = RAGChatUI()
    ui = app.create_ui()
    ui.launch(server_name="0.0.0.0", share=False)
