#
# Text to Speech Converter

import torch
from scipy.io import wavfile
from transformers import VitsModel, AutoTokenizer
from pathlib import Path
from typing import Optional, Union
import logging
import gradio as gr
import os
import tempfile
from textbox_with_stt_final_pro import TextboxWithSTTPro

class TextToSpeechPro:
    def __init__(self, 
                 model_name: str = "facebook/mms-tts-rus",
                 device: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
        """
        self.model_name = model_name
        self.device = device if device else 'cuda' if torch.cuda.is_available() else 'cpu'
        
        self.logger = logging.getLogger(__name__)
        self._setup_logging()
        
        self.model = None
        self.tokenizer = None
        self.is_loaded = False

        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        self.AVAILABLE_MODELS = {
            "Russian (Facebook MMS)": "facebook/mms-tts-rus",
            "Russian (multispeaker)": "utrobinmv/tts_ru_free_hf_vits_high_multispeaker",
            "English (Facebook MMS)": "facebook/mms-tts-eng",
            "French (Facebook MMS)": "facebook/mms-tts-fra",
            "German (Facebook MMS)": "facebook/mms-tts-deu",
            "Spanish (Facebook MMS)": "facebook/mms-tts-spa",
            "Italian (Facebook MMS)": "facebook/mms-tts-ita",
        }

        self.render()
        
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
    
    def load_model(self, model_name: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
        try:
            self.logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ {model_name} –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {self.device}")
            self.model = VitsModel.from_pretrained(model_name).to(self.device)
            self.tokenizer = AutoTokenizer.from_pretrained(model_name)
            self.model_name = model_name
            self.is_loaded = True
            self.logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return f"–ú–æ–¥–µ–ª—å {model_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
            return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}"
    
    def generate_speech(self, 
                       text: str,
                       sampling_rate: Optional[int] = None,
                       normalize_audio: bool = True) -> tuple:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        """
        if not self.is_loaded:
            return None, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å!"
        
        try:
            self.logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text[:50]}...")
            
            # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
            inputs = self.tokenizer(text, return_tensors="pt").to(self.device)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ
            with torch.no_grad():
                output = self.model(**inputs, speaker_id=1).waveform
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp_file:
                temp_path = tmp_file.name
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ
            audio = output.cpu().numpy()
            audio = audio.squeeze()
            
            if normalize_audio:
                audio = (audio * 32767).astype('int16')
            
            sr = sampling_rate if sampling_rate else self.model.config.sampling_rate
            wavfile.write(temp_path, sr, audio)
            
            return temp_path, "–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!"
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: {e}")
            return None, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}"

    def load_selected_model(self, model_name):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        model_id = self.AVAILABLE_MODELS[model_name]
        message = self.load_model(model_id)
        return message

    def generate_audio(self, text, model_name):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text.strip():
            return None, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"
        
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥—Ä—É–≥–∞—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë
        if not self.is_loaded or self.AVAILABLE_MODELS[model_name] != self.model_name:
            load_message = self.load_selected_model(model_name)
            if "–û—à–∏–±–∫–∞" in load_message:
                return None, load_message
        
        audio_path, message = self.generate_speech(text)

        if audio_path==None:
            self.device="cpu"
            load_message = self.load_selected_model(model_name)
            if "–û—à–∏–±–∫–∞" in load_message:
                return None, load_message
            audio_path, message = self.generate_speech(text)

        return audio_path

    def cleanup_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        temp_dir = tempfile.gettempdir()
        for file in os.listdir(temp_dir):
            if file.endswith('.wav') and file.startswith('tmp'):
                try:
                    os.remove(os.path.join(temp_dir, file))
                except:
                    pass

    def render(self):            
        # –°–æ–∑–¥–∞–Ω–∏–µ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        gr.Markdown("### üéµ Text to Speech Converter")
        #gr.Markdown("–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é AI –º–æ–¥–µ–ª–µ–π")
        
        with gr.Accordion(label="–ú–æ–¥–µ–ª—å", open=False):
            with gr.Column(scale=1):
                model_dropdown = gr.Dropdown(
                    choices=list(self.AVAILABLE_MODELS.keys()),
                    value="Russian (Facebook MMS)",
                    label="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å",
                    info="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ –º–æ–¥–µ–ª—å –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"
                )
                
                load_btn = gr.Button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å", variant="primary")
                load_status = gr.Textbox(label="–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏", interactive=False)
        
        with gr.Column(scale=2):
            self.text_input = TextboxWithSTTPro(
                label="–¢–µ–∫—Å—Ç",
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ—á—å...",
                lines=4,
                max_lines=10
            )
            
            generate_btn = gr.Button("üéµ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ", variant="primary")
            
            self.audio_output = gr.Audio(
                label="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ",
                type="filepath",
                interactive=True
            )
            
            #status_output = gr.Textbox(label="–°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", interactive=False)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        load_btn.click(
            fn=self.load_selected_model,
            inputs=model_dropdown,
            outputs=load_status
        )
        
        generate_btn.click(
            fn=self.generate_audio,
            inputs=[self.text_input.textbox, model_dropdown],
            outputs=[self.audio_output]
        )
        
        # –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
        model_dropdown.change(
            fn=self.load_selected_model,
            inputs=model_dropdown,
            outputs=load_status
        )
        
        # –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞
        with gr.Accordion(label="–ü—Ä–∏–º–µ—Ä—ã", open=False):
            gr.Examples(
                examples=[
                    ["–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? –≠—Ç–æ —Ç–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å."],
                    ["–ù–æ—á—å—é –¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä+–µ—Ç—å–µ–≥–æ –∏—é–Ω—è –Ω–∞—á–∞–ª –∏–∑–≤–µ—Ä–≥–∞—Ç—å—Å—è —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π \
        –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –≤—É–ª–∫+–∞–Ω –≤ –ï–≤—Ä–∞–∑–∏–∏ - –ö–ª+—é—á–µ–≤—Å–∫–æ–π. –û–± —ç—Ç–æ–º —Å–æ–æ–±—â–∏–ª–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å \
        –ö–∞–º—á–∞—Ç—Å–∫–æ–π –≥—Ä—É–ø–ø—ã —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–µ –∏–∑–≤–µ—Ä–∂–µ–Ω–∏—è, –≤–µ–¥—É—â–∏–π \
        –Ω–∞—É—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ò–Ω—Å—Ç–∏—Ç—É—Ç–∞ –≤—É–ª–∫–∞–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å–µ–π—Å–º–æ–ª–æ–≥–∏–∏ –î–í–û –†–ê–ù +–û–ª—å–≥–∞ –ì–∏—Ä–∏–Ω–∞.\
        ¬´–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–æ—á—å—é –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–≤–µ—á–µ–Ω–∏–µ, –∞ –≤–µ—Ä—à–∏–Ω–Ω–æ–µ —ç–∫—Å–ø–ª–æ–∑–∏–≤–Ω–æ–µ \
        –∏–∑–≤–µ—Ä–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–º–±–æ–ª–∏–∞–Ω—Å–∫–æ–≥–æ —Ç–∏–ø–∞. –ü–æ–∫–∞ —Ç–∞–∫–æ–µ –∏–∑–≤–µ—Ä–∂–µ–Ω–∏–µ –Ω–∏–∫–æ–º—É –Ω–µ –æ–ø–∞—Å–Ω–æ: \
        –Ω–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—é, –Ω–∏ –∞–≤–∏–∞—Ü–∏–∏¬ª –ø–æ—è—Å–Ω–∏–ª–∞ –¢–ê–°–° –≥–æ—Å–ø–æ–∂–∞ –ì–∏—Ä–∏–Ω–∞."],
                    ["Hello! How are you? This is a text-to-speech conversion test."],
                    ["Bonjour! Comment √ßa va? Ceci est un test de synth√®se vocale."],
                    ["Hola! ¬øC√≥mo est√°s? Esta es una prueba de texto a voz."]
                ],
                inputs=self.text_input.textbox,
                label="–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
            gr.Markdown("""
            ## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
            
            - **Russian (Facebook MMS)** - –ú–æ–¥–µ–ª—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            - **English (Facebook MMS)** - –ú–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞  
            - **French (Facebook MMS)** - –ú–æ–¥–µ–ª—å –¥–ª—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            - **German (Facebook MMS)** - –ú–æ–¥–µ–ª—å –¥–ª—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞
            - **Spanish (Facebook MMS)** - –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            - **Italian (Facebook MMS)** - –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            
            *–ú–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ*
            """)

    
    def create_interface(self):
        with gr.Blocks(title="Text to Speech Converter", theme=gr.themes.Soft()) as demo:
            self.render()

        return demo


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    with gr.Blocks(title="Text to Speech Converter", theme=gr.themes.Soft()) as demo:
        tts=TextToSpeechPro()
    
    # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    demo.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        show_error=True
    )
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    import atexit
    atexit.register(tts.cleanup_temp_files)