import gradio as gr
import ollama
import subprocess
from textbox_with_stt_final_pro import TextboxWithSTTPro

class LLMInterfacePro:
    def __init__(
        self,
        title: str = "Title",
        heading: str = "Heading",
        prompt_label: str = "–ü—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏",
        prompt_default: str = None,
        input_label: str = "Label input",
        input_placeholder: str = "–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç ...",
        input_value: str = "Hi! How are you?",
        generate_button_text: str = "Label button",
        output_label: str = "Label output",
        typical_prompts: dict = None,
        prompt_params: dict = None,
        default_prompt_index: int = 0,
        default_param_index: int = 0,
    ):
        self.title = title
        self.heading = heading
        self.prompt_label = prompt_label
        self.input_label = input_label
        self.input_placeholder = input_placeholder
        self.input_value = input_value
        self.generate_button_text = generate_button_text
        self.output_label = output_label

        # --- –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ---
        self.typical_prompts = {
            "–≠–∫—Å–ø–µ—Ä—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –∏ –ø–æ–º–æ—â–Ω–∏–∫ –≤ –æ–±–ª–∞—Å—Ç–∏ {param}. –û—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–º–µ—Ä—ã. –û–±—ä—è—Å–Ω—è–π —à–∞–≥ –∑–∞ —à–∞–≥–æ–º, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–ª–æ–∂–Ω–∞—è.",
            "–£—á–∏—Ç–µ–ª—å": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {param}. –û–±—ä—è—Å–Ω—è–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –ø—Ä–∏–≤–æ–¥—è –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏.",
            "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤ —Å—Ñ–µ—Ä–µ {param}. –°–Ω–∞—á–∞–ª–∞ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –ø–æ –¥–µ–ª—É, –∑–∞—Ç–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω–∏ –ª–æ–≥–∏–∫—É –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã.",
            "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –≤ –æ–±–ª–∞—Å—Ç–∏ {param}. –î–µ–ª–∞–π —Ä–∞–∑–±–æ—Ä –∑–∞–¥–∞—á–∏, –ø—Ä–∏–≤–æ–¥–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Å—Ä–∞–≤–Ω–∏–≤–∞–π —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –¥–µ–ª–∞–π –≤—ã–≤–æ–¥.",
            "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫": "–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ {param}, —Å–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏, –ø–æ—è—Å–Ω–∏ –∏—Ö."
        }

        self.prompt_params = {
            "–≠–∫—Å–ø–µ—Ä—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç": ["–ò–ò", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–º–µ–¥–∏—Ü–∏–Ω–∞", "—ç–∫–æ–Ω–æ–º–∏–∫–∞"],
            "–£—á–∏—Ç–µ–ª—å": ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "–∏—Å—Ç–æ—Ä–∏—è", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"],
            "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç": ["–±–∏–∑–Ω–µ—Å", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "—Ñ–∏–Ω–∞–Ω—Å—ã", "—Å—Ç–∞—Ä—Ç–∞–ø—ã"],
            "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–Ω–∞—É–∫–∞", "–ø–æ–ª–∏—Ç–∏–∫–∞", "–æ–±—â–µ—Å—Ç–≤–æ"],
            "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫": ["–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "–Ω–µ–º–µ—Ü–∫–∏–π", "—è–ø–æ–Ω—Å–∫–∏–π", "–∫–∏—Ç–∞–π—Å–∫–∏–π"]
        }

        self.typical_prompts = {**typical_prompts, **self.typical_prompts}
        self.prompt_params = {**prompt_params, **self.prompt_params}

        # --- –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º ---
        keys = list(self.typical_prompts.keys())
        if default_prompt_index < 0 or default_prompt_index >= len(keys):
            default_prompt_index = 0
        self.default_prompt_key = keys[default_prompt_index]

        params = self.prompt_params.get(self.default_prompt_key, [""])
        if default_param_index < 0 or default_param_index >= len(params):
            default_param_index = 0
        self.default_param_value = params[default_param_index]

        # --- —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ ---
        if prompt_default:
            self.prompt_default = prompt_default
        else:
            self.prompt_default = self.typical_prompts[self.default_prompt_key].replace("{param}", self.default_param_value)

        self.build_interface()

    def get_models(self):
        try:
            subprocess.run(["ollama", "list"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            models_info = ollama.list()
            return [m["model"] for m in models_info["models"]]
        except Exception as e:
            err = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e} –í–æ–∑–º–æ–∂–Ω–æ ollama –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞."
            return [err]

    def generate(self, model_name, prompt, input_text, temperature, top_p):
        if not input_text or not input_text.strip():
            return "‚ö†Ô∏è " + self.input_label + " –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
        try:
            full_prompt = f"{prompt}\n\n{self.input_label}:\n{input_text}"
            response = ollama.chat(
                model=model_name,
                options={"temperature": temperature, "top_p": top_p},
                messages=[{"role": "user", "content": full_prompt}]
            )
            return response["message"]["content"]
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}"

    def build_interface(self):
        models = self.get_models()

        # —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
        first_prompt_key = self.default_prompt_key
        first_param = self.default_param_value
        initial_prompt_text = self.prompt_default

        gr.Markdown(f"## üìù {self.heading}")

        with gr.Row():
            model_dropdown = gr.Dropdown(
                choices=models,
                value=models[0] if models else None,
                label="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å"
            )

        with gr.Accordion("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –º–æ–¥–µ–ª–∏", open=False):
            with gr.Row():
                typical_prompt_dd = gr.Dropdown(
                    choices=list(self.typical_prompts.keys()),
                    value=first_prompt_key,
                    label="–¢–∏–ø–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç"
                )
                param_dd = gr.Dropdown(
                    choices=self.prompt_params.get(first_prompt_key, []),
                    value=first_param,
                    label="–ü–∞—Ä–∞–º–µ—Ç—Ä"
                )

            with gr.Row():
                temperature_slider = gr.Slider(
                    0.0, 1.0, value=0.7, step=0.1, label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"
                )
                top_p_slider = gr.Slider(
                    0.0, 1.0, value=0.9, step=0.1, label="Top-p"
                )

        prompt_box = TextboxWithSTTPro(
            label=self.prompt_label,
            value=initial_prompt_text,
            lines=2
        )



        self.input_box = TextboxWithSTTPro(
            label=self.input_label,
            placeholder=self.input_placeholder,
            value=self.input_value,
            lines=5
        )

        run_button = gr.Button(self.generate_button_text)

        output_box = TextboxWithSTTPro(
            label=self.output_label,
            lines=5
        )

        # —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        def update_params(prompt_choice):
            return gr.update(
                choices=self.prompt_params.get(prompt_choice, []),
                value=self.prompt_params.get(prompt_choice, [""])[0]
            )

        def apply_prompt(prompt_choice, param_choice):
            if prompt_choice in self.typical_prompts:
                template = self.typical_prompts[prompt_choice]
                if "{param}" in template and param_choice:
                    return template.replace("{param}", param_choice)
                return template
            return self.prompt_default

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –ø—Ä–æ–º–ø—Ç–æ–≤
        typical_prompt_dd.change(
            fn=update_params,
            inputs=typical_prompt_dd,
            outputs=param_dd
        )
        typical_prompt_dd.change(
            fn=apply_prompt,
            inputs=[typical_prompt_dd, param_dd],
            outputs=prompt_box.textbox
        )
        param_dd.change(
            fn=apply_prompt,
            inputs=[typical_prompt_dd, param_dd],
            outputs=prompt_box.textbox
        )

        run_button.click(
            fn=self.generate,
            inputs=[model_dropdown, prompt_box.textbox, self.input_box.textbox, temperature_slider, top_p_slider],
            outputs=output_box.textbox
        )

        return 


if __name__ == "__main__":
    # –ø—Ä–∏–º–µ—Ä: –±–µ—Ä–µ–º 2-–π –ø—Ä–æ–º–ø—Ç ("–£—á–∏—Ç–µ–ª—å") –∏ 2-–π –ø–∞—Ä–∞–º–µ—Ç—Ä ("—Ñ–∏–∑–∏–∫–∞")
    with gr.Blocks() as demo:
        summarizer = LLMInterfacePro(typical_prompts={
            "–ü–∏—Å–∞—Ç–µ–ª—å": "–¢—ã —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –ø–∏—Å–∞—Ç–µ–ª—å –∏ —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫. –ü–∏—à–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ, –∂–∏–≤–æ –∏ —Å –¥–µ—Ç–∞–ª—è–º–∏, —á—Ç–æ–±—ã –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª—è. –°–æ—Å—Ç–∞–≤—å {param} –∏–∑ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.",
        }, 
        prompt_params={
            "–ü–∏—Å–∞—Ç–µ–ª—å": ["–∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ", "—Ä–∞—Å—Å–∫–∞–∑", "—ç—Å—Å–µ", "—Å—Ç–∞—Ç—å—è", "–ø–æ—ç–º–∞"],
        },
        default_prompt_index=0, default_param_index=0)
        
    demo.launch()
