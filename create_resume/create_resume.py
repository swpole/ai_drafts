import gradio as gr
import ollama


def get_models():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Ollama."""
    try:
        models_info = ollama.list()
        return [m["model"] for m in models_info["models"]]
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:", e)
        return ["llama2"]  # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç


def generate_summary(model_name, prompt, article_text):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç ollama —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ."""
    if not article_text.strip():
        return "‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏."
    try:
        full_prompt = f"{prompt}\n\n–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:\n{article_text}"
        response = ollama.chat(model=model_name, messages=[
            {"role": "user", "content": full_prompt}
        ])
        return response["message"]["content"]
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}"


def build_interface():
    models = get_models()
    with gr.Blocks(title="Summarizer with Ollama") as demo:
        gr.Markdown("## üìù –†–µ–∑—é–º–µ —Å—Ç–∞—Ç—å–∏")

        with gr.Row():
            model_dropdown = gr.Dropdown(
                choices=models,
                value=models[0] if models else None,
                label="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å"
            )

        prompt_box = gr.Textbox(
            label="–ü—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏",
            value="–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.",
            lines=1
        )

        article_box = gr.Textbox(
            label="–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏",
            placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏...",
            lines=5
        )

        run_button = gr.Button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ")

        output_box = gr.Textbox(
            label="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ",
            lines=5
        )

        run_button.click(
            fn=generate_summary,
            inputs=[model_dropdown, prompt_box, article_box],
            outputs=output_box
        )

    return demo


if __name__ == "__main__":
    demo = build_interface()
    demo.launch()
